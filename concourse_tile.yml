---
# The high-level description of your tile.
# Replace these properties with real values.
#
name: concourse # By convention lowercase with dashes
icon_file: resources/cc.PNG
label: concourse
description: Concourse cluster deployment
# metadata_version: 1.8                 # Optional, defaults to 1.8

# Global defaults (all optional)
#
# org: test-org                         # Name of org to create for your apps
# space: test-space                     # Name of space to create for your apps
apply_open_security_group: false       # Apply open security group, default: false
standalone: true                     # Suppress default CF properties in property_blueprints metadata, default: false
# Specify the packages to be included in your tile.
# The format of the section to include depends on the type
# of package you are describing. For fragments of each type
# that you can copy & paste, see:
#
# http://docs.pivotal.io/tiledev/tile-generator.html
#
forms:
- name: web_form
  label: Web
  properties:
  - name: static_ip
    type: selector
    label: Static IP?
    configurable: true
    default: "use_static"
    description: "Static Ip for web vm"
    option_templates:
    - name: static_ip_yes
      select_value: use_static
      label: Use
      named_manifests:
        - name: ips
          manifest: ((.properties.static_ips.value))

      property_blueprints:
      - name: static_ips
        type: string_list
        label: Web static ip
        configurable: true
    - name: static_ip_no
      select_value: do_not_use_static
      label: Do not use
      named_manifests:
        - name: ips
          manifest: []
  - name: external_url
    label: "Concourse portal external URL"
    type: "http_url"
    description: "Concourse web portal host name"
  - name: token_signing_key
    label: token signing key
    type: rsa_cert_credentials
    configurable: true
  - name: network_extension
    type: string
    label: Web vm network extension
    configurable: true
    optional: false
  - name: db_password
    type: secret
    label: DB password
    configurable: false
  - name: tsa_host_key
    label: tsa host key
    type: rsa_pkey_credentials
    configurable: false
  - name: worker_key
    label: worker host key
    type: rsa_pkey_credentials
    configurable: false
  - name: atc_tls
    label: Atc tls
    type: rsa_cert_credentials
    configurable: false
  - name: admin_password
    type: simple_credentials
    label: Local Admin User  password
    configurable: false
    default:
      identity: admin
  - name: uaa_admin_password
    type: simple_credentials
    label: Uaa Admin password
    configurable: false
    default:
      identity: admin
  - name: uaa_admin_secret
    type: secret
    label: Uaa Admin secret
    configurable: false
  - name: uaa_login_secret
    type: secret
    label: Uaa login secret
    configurable: false
  - name: credhub_db_password
    label: Credhub db password
    type: simple_credentials
    configurable: false
    default:
      identity: credhub
  - name: credhub_encryption_password
    label: cred hub encryption key
    type: secret
    configurable: false
  - name: concourse_to_credhub_client_secret
    label: concourse to credhub client secret
    type: secret
    configurable: false
  - name: credhub_admin_secret
    label: credhub admin  secret
    type: secret
    configurable: false
- name: authn_authz #3
  label: "Authentication and Authorization"
  properties:
  - name: auth_uaa
    type: selector
    label: Local UAA Login
    description: "Internal UAA authnetications"
    configurable: true
    default: uaa_on
    option_templates:
    - name: uaa_on
      label: Enabled
      select_value: uaa_on
    - name: uaa_off
      label: Disabled
      select_value: uaa_off


  - name: auth_selector
    type: selector
    label: LDAP
    configurable: true
    default: ldap_off
    description: "LDAP Authentication settings"
    option_templates:
    - name: ldap_on
      select_value: ldap_on
      label: enabled
      named_manifests:
      - name: ldap_settings
        manifest: |
          host: "((.properties.auth_selector.ldap_on.ldap_host.value))"
          bind_dn: "((.properties.auth_selector.ldap_on.bind_dn.value))"
          bind_pw: "((.properties.auth_selector.ldap_on.bind_pwd.value))"
          insecure_no_ssl: ((.properties.auth_selector.ldap_on.ldap_no_ssl.value))
          insecure_skip_verify: ((.properties.auth_selector.ldap_on.skip_ssl_verification.value))
          ca_cert: ((.properties.auth_selector.ldap_on.ldap_ca_cert.value))
          start_tls: ((.properties.auth_selector.ldap_on.start_tls.value))
          # BaseDN to start the search from. e.g. "ou=people,dc=mycompany,dc=com"
          user_search_base_dn: ((.properties.auth_selector.ldap_on.user_search_base_dn.value))
          # Optional filter to apply when searching the directory. e.g. "(objectClass=person)"
          user_search_filter: ((.properties.auth_selector.ldap_on.user_search_filter.value))
          # Attribute to match against the inputted username.
          # This will be translated and combined with the other filter as ‘(=)‘.
          user_search_username: ((.properties.auth_selector.ldap_on.user_search_username.value))
          # A mapping of attributes on the user entry to claims. Defaults to ‘uid’ if empty.
          user_search_id_attr: ((.properties.auth_selector.ldap_on.user_search_id_attr.value))
          # A mapping of attributes on the user entry to claims.
          user_search_name_attr: ((.properties.auth_selector.ldap_on.user_search_name_attr.value))
          # A mapping of attributes on the user entry to claims. Defaults to ‘mail’ if empty.
          user_search_email_attr: ((.properties.auth_selector.ldap_on.user_search_email_attr.value))
          # Can either be ‘sub’ - search the whole sub tree or ‘one’ - only search one level. Defaults to ‘sub’ if empty.
          user_search_scope: ((.properties.auth_selector.ldap_on.user_search_scope.value))
          # BaseDN to start the search from. e.g. "ou=groups,dc=mycompany,dc=com"
          group_search_base_dn: ((.properties.auth_selector.ldap_on.group_search_base_dn.value))
          # Optional filter to apply when searching the directory. e.g. "(objectClass=posixGroup)"
          group_search_filter: ((.properties.auth_selector.ldap_on.group_search_filter.value))
          # Adds an additional requirement to the filter that an attribute in the group match the user’s attribute value.
          # The exact filter being added is (=)
          group_search_group_attr: ((.properties.auth_selector.ldap_on.group_search_group_attr.value))
          group_search_user_attr: ((.properties.auth_selector.ldap_on.group_search_user_attr.value))
          # The attribute of the group that represents its name, e.g. "cn"
          group_search_name_attr: ((.properties.auth_selector.ldap_on.group_search_name_attr.value))
          # Can either be ‘sub’ - search the whole sub tree or ‘one’ - only search one level. Defaults to ‘sub’ if empty.
          group_search_scope: ((.properties.auth_selector.ldap_on.group_search_scope.value))

      property_blueprints:
      - name: ldap_host
        type: domain
        label: LDAP Host
        configurable: true
      - name: bind_dn
        type: string
        label: Bind  DN (ldap_bind_dn)
        configurable: true
      - name: bind_pwd
        type: secret
        label: Bind account password (ldap_bind_pw)
        configurable: true
      - name: ldap_no_ssl
        type: boolean
        label: LDAP host does not use ldaps (ldap_insecure_no_ssl)
        configurable: true
      - name: skip_ssl_verification
        type: boolean
        label: Skip SSL verification (ldap_insecure_skip_verify)
        configurable: true
        optional: true
      - name: ldap_ca_cert
        type: ca_certificate
        label: LDAP CA certificate (ldap_ca_cert)
        configurable: true
        optional : true
      - name: start_tls
        type: boolean
        label: Start tls (ldap_start_tls)
        optional: true
      - name: user_search_base_dn
        label: User search base dn (ldap_user_search_base_dn)
        type: string
        configurable: true
        optional: false
      - name: user_search_filter
        label: User search filter (ldap_user_search_filter)
        type: string
        configurable: true
        optional: true
      - name: user_search_username
        label: User search user name (ldap_user_search_username)
        description: |
          Attribute to match against the inputted username.
          This will be translated and combined with the other filter as ‘(=)‘.
        type: string
        configurable: true
        optional: false
      - name: user_search_id_attr
        label: User ID attribute (ldap_user_search_id_attr)
        description: A mapping of attributes on the user entry to claims. Defaults to ‘uid’ if empty.
        type: string
        configurable: true
        optional: true
      - name: user_search_name_attr
        label: User name attribute (ldap_user_search_name_attr)
        description: A mapping of attributes on the user entry to claims.
        type: string
        configurable: true
        optional: true
      - name: user_search_email_attr
        label: Email attribute (ldap_user_search_email_attr)
        description: A mapping of attributes on the user entry to claims. Defaults to ‘mail’ if empty.
        type: string
        configurable: true
        optional: true
      - name: user_search_scope
        label: User search scope (ldap_user_search_scope)
        description: Can either be ‘sub’ - search the whole sub tree or ‘one’ - only search one level. Defaults to ‘sub’ if empty.
        type: string
        configurable: true
        optional: true
      - name: group_search_base_dn
        label: Group search base dn (ldap_group_search_base_dn)
        description: Base DN to start the search from. e.g. ou=groups,dc=mycompany,dc=com
        type: string
        configurable: true
        optional: false
      - name: group_search_filter
        label: Group search filter (ldap_group_search_filter)
        description: Optional filter to apply when searching the directory. e.g. (objectClass=posixGroup)
        type: string
        configurable: true
        optional: true
      - name: group_search_group_attr
        label: Group search group attribute (ldap_group_search_group_attr)
        description: |
          Adds an additional requirement to the filter that an attribute in the group match the user’s attribute value.
          The exact filter being added is (=)
        type: string
        configurable: true
        optional: true
      - name: group_search_user_attr
        label: Group search user attribute (ldap_group_search_user_attr)
        description:
        type: string
        configurable: true
        optional: true
      - name: group_search_name_attr
        label: Group search name attribute (ldap_group_search_name_attr)
        description: The attribute of the group that represents its name, e.g. cn
        type: string
        configurable: true
        optional: true
      - name: group_search_scope
        label: Group search scope (ldap_group_search_scope)
        description: Can either be ‘sub’ - search the whole sub tree or ‘one’ - only search one level. Defaults to ‘sub’ if empty.
        type: string
        configurable: true
        optional: true
      - name: ldap_main_team_group
        label: Main team ldap group
        type: string
        configurable: true
        optional: true

    - name: ldap_off
      select_value: ldap_off
      label: Disabled
      named_manifests:
      - name: ldap_settings
        manifest: ""


- name: Logging #2
  label: Logging configuration
  properties:
  - name: build
    label: "Enable Build Audit Logging"
    type: boolean
    configurable: true
  - name: job
    label: "Enable Job Audit Logging"
    type: boolean
    configurable: true
  - name: pipeline
    label: "Enable Pipeline Audit Logging"
    type: boolean
    configurable: true
  - name: resource
    label: "Enable Resource Audit Logging"
    type: boolean
    configurable: true
  - name: team
    label: "Enable Team Audit Logging"
    type: boolean
    configurable: true
  - name: system
    label: "Enable System Audit Logging"
    type: boolean
    configurable: true
  - name: volume
    label: "Enable volume Audit Logging"
    type: boolean
    configurable: true
  - name: worker
    label: "Enable Worker Audit Logging"
    type: boolean
    configurable: true
  - name: container
    label: "Enable Container Audit Logging"
    type: boolean
    configurable: true


packages:
- name: bpm
  type: bosh-release
  path: resources/bpm-release-1.1.13.tgz
- name: uaa
  type: bosh-release
  path: resources/uaa-release-75.6.0.tgz
- name: concourse
  path: resources/concourse-bosh-release-6.7.6.tgz
  type: bosh-release
- name: postgres
  type: bosh-release
  path: resources/postgres-release-43.tgz
- name: credhub
  type: bosh-release
  path: resources/credhub-2.9.1.tgz
  jobs:
  - name: db
    instance: 1
    dynamic_ip: 1
    type: standalone
    memory: 512
    ephemeral_disk: 4096
    persistent_disk: 4096
    cpu: 2
    templates:
    - name: postgres
      release: postgres
    properties:
      databases:
        port: 5432
        databases:
        - name: atc
        - name: uaa
        - name: credhub
        roles:
        - name: concourse
          password: ((.properties.db_password.value))
        - name: uaa
          password: uaadbpassword
        - name: credhub
          password: ((.properties.credhub_db_password.password))

  - name: web
    instance: 1
    dynamic_ip: 0
    static_ip: 1
    type: standalone
    networks:
      - static_ips: (( .properties.static_ip.selected_option.parsed_manifest(ips) ))
        name: (($self.service_network))


    templates:
    - name: web
      release: concourse
    - name: bpm
      release: bpm
    - name: uaa
      release: uaa
    - name: credhub
      release: credhub
    properties:
      #  vm_extensions:
      #  - ((.properties.network_extension.value))
      main_team:
        auth:
          local:
            users: [ admin ]
          ldap:
            groups: [ ((.properties.auth_selector.ldap_on.ldap_main_team_group.value)) ]
      add_local_users: [ 'admin:((.properties.admin_password.password))' ]
      ldap_auth: (( .properties.auth_selector.selected_option.parsed_manifest(ldap_settings) ))

      token_signing_key:
        private_key: ((.properties.token_signing_key.private_key_pem))
        public_key: ((.properties.token_signing_key.public_key_pem))
      external_url: ((.properties.external_url.value))
      postgresql:
        database: &db_name atc
        role: &db_role
          name: concourse
          password: ((.properties.db_password.value))

      worker_gateway:
        host_key:
          public_key: ((.properties.tsa_host_key.public_key_openssh))
          private_key: ((.properties.tsa_host_key.private_key_pem))
          public_key_fingerprint: ((.properties.tsa_host_key.public_key_fingerprint))

        authorized_keys: |
          ((.properties.worker_key.public_key_openssh))
      tls:
        bind_port: 443
        cert: &atc_tls
          certificate: ((.properties.atc_tls.cert_pem))
          private_key: ((.properties.atc_tls.private_key_pem))
      uaa:
        url: &uaa-url "((.properties.external_url.value)):8443"
        port: 8181
        scim:
          users:
          - name: admin
            password: ((.properties.uaa_admin_password.password))
            groups:
            - scim.write
            - scim.read
            - bosh.admin
            - credhub.read
            - credhub.write
        admin: {client_secret: ((.properties.uaa_admin_secret.value))}
        login: {client_secret: ((.properties.uaa_login_secret.value))}
        zones: {internal: {hostnames: []}}
        sslCertificate: ((.properties.atc_tls.cert_pem))
        sslPrivateKey: ((.properties.atc_tls.private_key_pem))
        clients:
          concourse_to_credhub_client:
            access-token-validity: 1200
            authorities: credhub.read,credhub.write
            authorized-grant-types: client_credentials
            id: concourse_to_credhub_client
            override: true
            refresh-token-validity: 3600
            scope: ""
            secret: ((.properties.concourse_to_credhub_client_secret.value))
          credhub_admin:
            access-token-validity: 3600
            authorities: credhub.read,credhub.write
            authorized-grant-types: client_credentials
            id: credhub_admin
            override: true
            refresh-token-validity: 3600
            scope: ""
            secret: ((.properties.credhub_admin_secret.value))

        jwt:
          revocable: true
          policy:
            active_key_id: key-1
            keys:
              key-1:
                signingKey: ((.properties.atc_tls.private_key_pem))
      uaadb:
        tls: disabled
        port: 5432
        db_scheme: postgresql
        databases:
        - tag: uaa
          name: &uaa_db uaa
        roles:
        - tag: admin
          name: *uaa_db
          password: &uaa_db_passwd uaadbpassword
      encryption:
        active_key_label: key-1
        encryption_keys:
        - label: key-1
          passphrase: uaa_encryption_key
      login:
        saml:
          serviceProviderCertificate: ((.properties.atc_tls.cert_pem))
          serviceProviderKey: ((.properties.atc_tls.private_key_pem))
          serviceProviderKeyPassword: ""
      audit:
        build: ((.properties.build.value))
        container: ((.properties.container.value))
        job: ((.properties.job.value))
        pipeline: ((.properties.pipeline.value))
        resource: ((.properties.resource.value))
        system: ((.properties.system.value))
        team: ((.properties.team.value))
        volume: ((.properties.volume.value))
        worker: ((.properties.worker.value))

        #cred hub
      credhub:
        url: ((.properties.external_url.value)):8844
        port: 8844
        tls:
          private_key: ((.properties.atc_tls.private_key_pem))
          certificate: ((.properties.atc_tls.cert_pem))
          ca_cert: (($ops_manager.ca_certificate))
          client_cert: ((.properties.atc_tls.cert_pem))
          insecure_skip_verify: false
        client_id: concourse_to_credhub_client
        client_secret: ((.properties.concourse_to_credhub_client_secret.value))
        path_prefix: /concourse
        authentication:
          uaa:
            enabled: true
            url: "((.properties.external_url.value)):8443"
            ca_certs: [(($ops_manager.ca_certificate))]
        authorization:
          acls:
            enabled: false
        data_storage:
          type: postgres
          database: credhub
          username: ((.properties.credhub_db_password.identity))
          password: ((.properties.credhub_db_password.password))
          require_tls: false
        log_level: info
        encryption:
          providers:
          - name: internal-provider
            type: internal
          keys:
          - provider_name: internal-provider
            key_properties:
              encryption_password: ((.properties.credhub_encryption_password.value))
            active: true


  - name: worker
    type: standalone
    instances: 1

    templates:
    - name: worker
      release: concourse
    properties:
      drain_timeout: 10m
      worker_gateway:
        worker_key:
          private_key: ((.properties.worker_key.private_key_pem))
          public_key: ((.properties.worker_key.public_key_openssh))
          public_key_fingerprint: ((.properties.worker_key.public_key_fingerprint))
